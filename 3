#[derive(Debug, PartialEq, Eq, FromForm)]
pub struct Userid<'r> {
    pub url: Option<&'r str>,
    pub name: &'r str,
}

impl Userid<'_> {
    /**
     * try seperating a userid into a username and url
     * if there is no url then we use just the username
     */
    pub fn parse(from: &str) -> Userid {
        fn massage_url(input: &'_ str) -> String {
            input.replacen("https://", "", 1).replacen("http://", "", 1)
        }

        let values = from.split_once('@');

        match values {
            Some(s) => Userid {
                name: s.0,
                url: Some(s.1),
            },
            None => Userid {
                url: None,
                name: &from,
            },
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_parse() {
        assert_eq!(
            Userid::parse("zork@example.com"),
            Userid {
                url: Some("example.com"),
                name: "zork"
            }
        );
        assert_eq!(
            Userid::parse("zork@https://example.com"),
            Userid {
                url: Some("example.com"),
                name: "zork"
            }
        );
        assert_eq!(
            Userid::parse("zork@http://example.com"),
            Userid {
                url: Some("example.com"),
                name: "zork"
            }
        );
        assert_eq!(
            Userid::parse("zork"),
            Userid {
                url: None,
                name: "zork"
            }
        );
    }
}
